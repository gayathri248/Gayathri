import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Step 1: Load Data
def load_stock_data(ticker='AAPL', start='2015-01-01', end='2023-12-31'):
    data = yf.download(ticker, start=start, end=end)
    return data['Close'].values.reshape(-1, 1), data

# Step 2: Preprocess Data
def preprocess_data(data, look_back=60):
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)

    X, y = [], []
    for i in range(look_back, len(scaled_data)):
        X.append(scaled_data[i-look_back:i, 0])
        y.append(scaled_data[i, 0])
    
    X, y = np.array(X), np.array(y)
    X = np.reshape(X, (X.shape[0], X.shape[1], 1))  # LSTM expects 3D input
    return X, y, scaler

# Step 3: Build Model
def build_model(input_shape):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=input_shape))
    model.add(LSTM(units=50))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Step 4: Train and Predict
def train_and_predict(data, look_back=60):
    X, y, scaler = preprocess_data(data, look_back)
    model = build_model((X.shape[1], 1))
    model.fit(X, y, epochs=10, batch_size=32, verbose=1)

    predicted = model.predict(X)
    predicted_prices = scaler.inverse_transform(predicted)
    real_prices = scaler.inverse_transform(y.reshape(-1, 1))

    return real_prices, predicted_prices, model

# Step 5: Visualize
def plot_predictions(real, predicted):
    plt.figure(figsize=(10,6))
    plt.plot(real, color='blue', label='Actual Price')
    plt.plot(predicted, color='red', label='Predicted Price')
    plt.title('Stock Price Prediction')
    plt.xlabel('Time')
    plt.ylabel('Stock Price')
    plt.legend()
    plt.show()

# Main
if __name__ == "__main__":
    raw_data, df = load_stock_data('AAPL')  # Change ticker as needed
    real, predicted, model = train_and_predict(raw_data)
    plot_predictions(real, predicted)
